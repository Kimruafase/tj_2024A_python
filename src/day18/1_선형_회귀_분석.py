# day18 > 1_선형_회귀_분석.py

from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
from sklearn.metrics import mean_absolute_error
import numpy as np

"""
    > 회귀 분석 : 변수들간의 인과 관계 파악 / 분석
        > 종속 변수가 독립 변수의 변화에 따라 어떻게 변화하는지 예측
        > 통계학, 머신러닝

    > 머신러닝 : 컴퓨터에 입력된 데이터에서 스스로 패턴을 찾아 학습하여 새로운 지식을 만들고 예측하는 통찰을 제공하는 분야
        > 프로세스 : 1. 데이터 수집 -> 2. 전처리 -> 3. 모델 구축 및 학습 -> 4. 모델 평가 -> 5. 예측
        > 회귀 분석 결과에 대한 평가 지표
            > 1. MAE(Mean Absolute Error, 평균 절대 오차) 
                > 예측값과 실제값 사이의 절대 차이를 구하고 평균을 계산하는 방식
                    > 1) 절대 차이 계산 : 예측값과 실제값 차이의 절대값
                        > ex_ 실제값이 -0.5이고, 예측값이 0일 때 0.5
                    > 2) 평균 계산 : 모든 절대 차이의 평균을 구한다.
                
            > 2. MSE(Mean Squared Error, 평균 제곱 오차)
                > 모델의 예측 값과 실제 값의 차이를 제곱하여 평균을 구하는 방식
                    > 1) 오차 계산 : 예측값과 실제 값의 차이, 오차를 error 라고 부른다.
                        > 예를 들어 실제값이 3이고 예측값이 2.5이면 오차는 3 - 2.5 = 0.5
                    > 2) 제곱 : 각 오차를 제곱하여 양수로 변환, 제곱의 이유 : 부호의 문제 발생 억제, 오차에 더 큰 페널티를 주기 위함
                        > 예를 들어 오차가 2일 경우 제곱 오차는 4, 오차가 0.5 일 경우 제곱 오차는 0.25
                    > 3) 평균 계산 : 모든 제곱 오차의 평균을 구한다.
                        > 예를 들어 제곱 오차가 4, 9, 1 이라면 (4 + 9 + 1) / 3 = 14 / 3 = 4.666~~ 
                > MSE 가 작을 수록 실제 예측에 가까워 진다.
                
            > 3. RMSE(Root Mean Square Error, 평균 제곱근 오차)
                > MSE 의 제곱근으로 계산하는 방식, 원래 데이터의 단위와 동일한 단위를 가지므로 해석이 직관적이다.
                    > 1) MSE 계산(2번과 동일)
                    > 2) 제곱근 계산
                    
            > 4. R**2(R-Squared)
                > 모델이 데이터의 변동성을 얼마나 잘 설명하는지 나타내는 방법, 예측력이 얼마나 강력한지 측정, 값은 0 ~ 1 사이
                    > 1) 총 변동성(Total sum of Squares, SST)
                        > 데이터의 실제 값이 평균갑과 얼마나 차이가 나는지 측정 계산
                   
                    > 2) 잔차 변동성(Residual sum of Squares, SSE)
                        > 모델의 예측값과 실제값 사이의 차이를 계산
                        
                    > 3) 설명된 변동성
                        > 모델이 설명할 수 있는 변동성의 양을 측정 즉, SST 에서 SSE 를 빼서 계산
                
                > 1에 가까울수록 모델이 데이터를 잘 설명하고 있다. 예측하고 있다.
                > 0에 가까울수록 모델이 예측에 대한 설명력이 전혀 없다는 의미를 갖는다.
"""

# [1] 평가 지표 MSE
real_value = [3, -0.5, 2, 7]
pre_value = [2.5, 0.0, 2, 8]

# 계산
MSE = mean_squared_error(real_value, pre_value)
print(f" mse : {MSE}")

# [2] 평가지표 RMSE
# 모델 평가 -> .sqrt() : 제곱근 함수
RMSE = np.sqrt(MSE)
print(f" rmse : {RMSE}")
"""
    > MSE 계산 결과 : 0.375
    > RMSE 는 MSE의 제곱근을 구한다
        > 0.6123724356957945
    
    > MSE 와 RMSE
        > 모델의 성능을 평가하기 위해 사용되는 두 가지 오차 측정 지표
        > 오차가 작을수록 예측 모델의 성능이 좋다는 것을 의미한다.
        > 단위 :
            > MSE 는 제곱 단위로 표현, 원래 데이터 단위와 다르다.
            > RMSE 는 원래 데이터 단위와 동일하므로 해석이 직관적이다.
        > 해석 :
            > MSE 는 오차의 제곱 평균으로 수학적 편리함을 제공한다.
            > RMSE 는 예측 오차의 평균적인 크기를 원래 단위로 제공한다.
"""

# [3] 평가지표 결정계수(R-Squared)
# 모델 평가
R2 = r2_score(real_value, pre_value)
print(f" R-Squared : {R2}") # 0.9486081370449679
"""
    > 1. 실제값의 평균 계산
        (3 - 0.5 + 2 + 7) / 4 = 2.875
        
    > 2. SSE (잔차 변동성) 계산     잔차의 제곱의 합
        오차1 = 3 - 2.5 = 0.5     -> 0.25
        오차2 = -0.5 - 0 = -0.5   -> 0.25
        오차3 = 2 - 2 = 0         -> 0
        오차4 = 7 - 8 = -1        -> 1
                                 -> 1.5
                                 
    > 3. SST(총 변동성) 계산              차이의 제곱 합
        변동1 = 3 - 2.875 = 0.125     -> 0.0156
        변동2 = -0.5 - 2.875 = -3.375 -> 11.390625
        변동3 = 2 - 2.875 = -0.875    -> 0.765625
        변동4 = 7 - 2.875 = 4.125     -> 17.015625
                                     -> 29.187475
    
    > 4. R = 1 - (SSE / SST) = 1 - (1.5 / 29.187475) = 0.9486080930262039
"""

# [4] 평가지표 MAE
MAE = mean_absolute_error(real_value, pre_value)
print(f" mae : {MAE}")  # 0.5